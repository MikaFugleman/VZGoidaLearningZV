// Another project with LinkedList. 
// Includes several new methods: 
// capitalizeFirstLetter - to capitalize initial letters in a String.
// validateName/Phone/Email - methods to validate user input.


import java.io.Serializable;

public class Contact implements Serializable {

private String name;
private String phoneNumber;
private String email;

    public Contact(String name, String phoneNumber, String email) {
        this.name = name;
        this.phoneNumber = phoneNumber;
        this.email = email;
    }


    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPhoneNumber() {
        return phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        return "Contact{" +
                "name='" + name + '\'' +
                ", phoneNumber='" + phoneNumber + '\'' +
                ", email='" + email + '\'' +
                '}';
    }
}
  




import java.io.*;
import java.util.*;

public class ContactManager {




    LinkedList<Contact> list;

    public ContactManager() {
        this.list = new LinkedList<>();
    }


    public void printMenu() {
        System.out.println("""
                
                Welcome to Contact Manager. To navigate, enter:
                
                (A)dd Contact
                (R)emove Contact
                (S)earch Contact
                (U)pdate Contact
                (D)isplay All Contacts
               
                (L)oad contacts
                (W)rite contacts
                (O)rder contacts
                
                (M)enu
                (Q)uit
                
                """);
    }

    public static void menu (ContactManager c1) {

        Scanner scanner = new Scanner(System.in);
        c1.printMenu();



        while (true) {

            // BELOW STRING MUST BE INSIDE THE WHILE LOOP
            String userResponse = scanner.nextLine();

            switch (userResponse.toUpperCase().charAt(0)) {
                case 'A': {
                    c1.addContact();
                    break;
                }
                case 'R': {
                    c1.removeContact();
                    break;
                }
                case 'S': {
                    c1.searchContact();
                    break;
                }
                case 'U': {
                    c1.updateContact();
                    break;
                }
                case 'D': {
                    c1.displayContacts();
                    break;
                }
                case 'L': {
                    c1.loadContacts("contacts");
                    break;
                }
                case 'W': {
                    c1.writeContacts("contacts");
                    break;
                }
                case 'O': {
                    c1.sortContacts();
                    break;
                }
                case 'M': {
                    c1.printMenu();
                    break;
                }
                case 'Q': {
                    System.out.println("Quitting...");
                    scanner.close();
                    return;
                }
                default: {
                    System.out.println("Input unknown. Try again or enter 'M' for Menu");
                    break;
                }

            }

        }
    }



    public boolean validateName(String name) {
        if (name == null || name.trim().isEmpty()) {
            System.out.println("Name can not be empty.");
            return false;
        }
        if (!name.matches("[a-zA-Z\\s]+")) {
            System.out.println("Name can only contain characters.");
            return false;
        }
        if (name.length() > 50) {
            System.out.println("Name length can not exceed 50 characters.");
            return false;
        }
        return true;
    }

    public boolean validatePhoneNumber(String number) {
        if (number == null || number.trim().isEmpty()) {
            System.out.println("Phone number can not be empty.");
            return false;
        }
        if (!number.matches("\\d{10}")) {
            System.out.println("Phone number must be 10 digits long.");
            return false;
        }
        for (Contact contact : list) {
            if (contact.getPhoneNumber().equalsIgnoreCase(number)) {
                System.out.println("Phone number already exists");
                return false;
            }
        }
        return true;
    }

    public boolean validateEmail(String email) {
        if (email == null || email.trim().isEmpty()) {
            System.out.println("Email can not be empty.");
            return false;
        }

        if (!email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
            System.out.println("Invalid email format.");
            return false;
        }
        for (Contact contact : list) {
            if (contact.getEmail().equalsIgnoreCase(email)) {
                System.out.println("Email already exists in contact list.");
                return false;
            }
        }
        return true;
    }

    public String capitalizeFirstLetter(String input) {
        String[] words = input.toLowerCase().split("\\s+");  // Split the input by spaces and convert everything to lowercase
        StringBuilder capitalizedWords = new StringBuilder();

        for (String word : words) {
            if (!word.isEmpty()) {
                // Capitalize the first letter and append the rest of the word
                capitalizedWords.append(Character.toUpperCase(word.charAt(0)))
                        .append(word.substring(1))
                        .append(" ");
            }
        }

        return capitalizedWords.toString().trim();  // Convert to string and remove trailing spaces
    }



    public void addContact() {
        Scanner scanner = new Scanner(System.in);

        String name;
        String phone;
        String email;

        while (true) {
            System.out.println("Please enter contact name: ");
             name = scanner.nextLine();
             name = capitalizeFirstLetter(name);
            if (validateName(name)) {
                break;
            }
        }

        while (true) {
            System.out.println("Please enter contact phone number: ");
             phone = scanner.nextLine();
            if (validatePhoneNumber(phone)) {

                break;
            }
        }

        while (true) {
            System.out.println("Please enter contact email address: ");
             email = scanner.nextLine();
            if (validateEmail(email)) {
                break;
            }
        }


        list.add(new Contact(name, phone, email));
        System.out.println("Contact added: " + name);

    }

    public void removeContact() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Please enter contact name to remove: ");
        String contactToRemove = scanner.nextLine();

        Iterator<Contact> iterator = list.iterator();
        while (iterator.hasNext()) {
            Contact contact = iterator.next();
            if (contact.getName().equalsIgnoreCase(contactToRemove)) {
                iterator.remove();
                System.out.println("Contact removed: " + contact);
            }
        }
    }

    public void searchContact() {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Searching contact. Please enter contact name: ");
        String name= scanner.nextLine();

        for (Contact contact : list) {
            if (contact.getName().equalsIgnoreCase(name)) {
                System.out.println("Contact found: " + contact);
            }
        }
        System.out.println("Contact not found.");
    }

    public void displayContacts() {
        System.out.println("List of all contacts: \n");
        for (Contact contact : list) {
            System.out.println(contact);
        }
    }

    public void updateContact() {

        Scanner scanner = new Scanner(System.in);
        System.out.println("Please specify contact name to update the contact: ");
        String name = scanner.nextLine();


        Contact contactToUpdate = null;

        for (Contact contact : list) {
            if (contact.getName().equalsIgnoreCase(name)) {
                contactToUpdate = contact;
                break;
            }
        }

        if (contactToUpdate == null) {
            System.out.println("Contact not found");
            return;
        }


        System.out.println("What would you like to update? (Enter Y to update, N to skip)");

        System.out.println("Update name? (Y/N)");
        String updateName = scanner.nextLine().trim().toUpperCase();

        System.out.println("Update Phone Number? (Y/N)");
        String updatePhoneNumber = scanner.nextLine().trim().toUpperCase();

        System.out.println("Update Email? (Y/N)");
        String updateEmail = scanner.nextLine().trim().toUpperCase();


        if (updateName.equalsIgnoreCase("Y")) {
            System.out.println("Enter new name: ");
            String newName = scanner.nextLine();
            contactToUpdate.setName(newName);
        }

        if (updatePhoneNumber.equals("Y")) {
            System.out.println("Enter new Phone Number: ");
            String newPhoneNumber = scanner.nextLine();
            contactToUpdate.setPhoneNumber(newPhoneNumber);
        }

        if (updateEmail.equals("Y")) {
            System.out.println("Enter new Email: ");
            String newEmail = scanner.nextLine();
            contactToUpdate.setEmail(newEmail);
        }

        System.out.println("\nContact updated to: " + contactToUpdate);

    }


    public void sortContacts() {

        // Method that allows sorting the linkedList (by contact name) by converting it into an ArrayList and back:


        //Convert LinkedList to ArrayList with existing list as argument:
        ArrayList<Contact> contactArrayList = new ArrayList<>(list);

        //Sorting:
        contactArrayList.sort(Comparator.comparing(Contact::getName));

        //Converting back:
        list = new LinkedList<>(contactArrayList);

        System.out.println("Contacts sorted by name: ");
        displayContacts();
    }


    public void writeContacts(String filename) {

        try (BufferedWriter writer = new BufferedWriter(new FileWriter(filename))) {
            for (Contact contact : list) {
                writer.write(contact.getName() + "," + contact.getPhoneNumber() + "," + contact.getEmail());
                writer.newLine();
            }
            System.out.println("Contacts saved to file: " + filename);
        } catch (IOException e) {
            System.out.println("Error while writing contacts to file: " + filename);
        }

    }

    public void loadContacts(String filename) {
        try (Scanner scanner = new Scanner(new File(filename))) {
            list.clear();
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                String[] parts = line.split(",");
                String name = parts[0];
                String phoneNumber = parts[1];
                String email = parts[2];
                list.addLast(new Contact(name, phoneNumber, email));
            }
            System.out.println("Contacts loaded from file: " + filename);
        } catch (Exception b) {
            System.out.println("Error while reading from file: " + b.getMessage());
        }

    }

}





public class Main {


    public static void main(String[] args) {


    ContactManager c1 = new ContactManager();

    ContactManager.menu(c1);

    }
}



